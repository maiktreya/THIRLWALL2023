eu_data_panel$dif_tech_exp <- diff(eu_data_panel$tech_exports)
eu_data_panel$dif_tech_imp <- diff(eu_data_panel$tech_imports)
eu_data_panel$dif_inv <- diff(eu_data_panel$investment)
eu_data_panel$dif_exp <- diff(eu_data_panel$exports)
eu_data_panel$lag_rprices <- lag(eu_data_panel$xprices - eu_data_panel$mprices)
eu_data_panel$lag_inc <- lag(eu_data_panel$income)
eu_data_panel$lag_finc <- lag(eu_data_panel$fincome)
eu_data_panel$lag_consum <- lag(eu_data_panel$consump)
eu_data_panel$lag_tech_exp <- lag(eu_data_panel$tech_exports)
eu_data_panel$lag_tech_imp <- lag(eu_data_panel$tech_imports)
eu_data_panel$lag_inv <- lag(eu_data_panel$investment)
eu_data_panel$lag_exp <- lag(eu_data_panel$exports)
pre_imp[[i]] <- systemfit(as.formula(imp_fun), data = eu_data_panel, inst = as.formula(inst_imp), method = "3SLS", control = control_system) # ,
coef_imp[[i]] <- pre_imp[[i]]$coefficients
pre_exp[[i]] <- systemfit(as.formula(exp_fun), data = eu_data_panel, method = "SUR", control = control_system1)
coef_exp[[i]] <- pre_exp[[i]]$coefficients
}
final_object <- data.table()
for (i in tech) {
for (r in seq_along(countries)) {
obs_m <- data.table(summary(pre_imp[[i]])$eq[[r]]$coefficients[, c("Estimate", "Pr(>|t|)")], keep.rownames = T)[, name := paste0(i, "-imp-", countries[r])]
obs_x <- data.table(summary(pre_exp[[i]])$eq[[r]]$coefficients[, c("Estimate", "Pr(>|t|)")], keep.rownames = T)[, name := paste0(i, "-exp-", countries[r])]
final_object <- rbind(final_object, obs_m, obs_x)
}
}
colnames(final_object) <- c("var", "est", "prob", "unit")
source("src/LIBRARY/functions2023.R")
test1 <- nrow(final_object[var == "dif_fincome" & prob > 0.05, ]) / nrow(final_object[var == "dif_fincome", ])
test2 <- nrow(final_object[var == "dif_income" & prob > 0.05, ]) / nrow(final_object[var == "dif_income", ])
test3 <- nrow(final_object[var == "dif_rprices" & unit %like% "imp" & prob > 0.05, ]) / nrow(final_object[var == "dif_rprices" & unit %like% "imp", ])
test4 <- nrow(final_object[var == "dif_rprices" & unit %like% "exp" & prob > 0.05, ]) / nrow(final_object[var == "dif_rprices" & unit %like% "exp", ])
joint_test_coef <- c(test1, test2, test3, test4)
names(joint_test_coef) <- c("dif_fincome", "dif_income", "dif_rprices_m", "dif_rprices_x")
rbind(joint_test_coef, joint_test_coef * 45) %>%
t() %>%
print()
######################### ENDOGENEITY ANALYSIS
# The null in Wu-Hausman is that they are equally consistent, have to reject for 2sls
ivreg_table <- data.table()
for (i in tech) {
eu_data_panel <- eu_data[tech == i]
for (r in countries) {
eu_data_unit <- eu_data_panel[reporter == r]
pre <- summary(AER::ivreg(diff(tech_imports) ~ diff(income) + diff(rprices) + ect_m[2:28] + dummy[2:28] |
diff(consump) + diff(investment) + diff(exports) + diff(rprices) + ect_m[2:28] + dummy[2:28], data = eu_data_unit), diagnostics = T)$diagnostics
ivreg_table <- rbind(ivreg_table, data.table(pre)[, unit := paste0(i, "-imp-", r)][, test := c("Weak-IV", "Wu-Hausman", "Sargan")])
}
}
colnames(ivreg_table) <- c("df1", "df2", "stat", "prob", "unit", "test")
iv_test1 <- nrow(ivreg_table[test == "Weak-IV" & prob < 0.05, ]) / nrow(ivreg_table[test == "Weak-IV", ])
iv_test2 <- nrow(ivreg_table[test == "Wu-Hausman" & prob < 0.05, ]) / nrow(ivreg_table[test == "Wu-Hausman", ])
iv_test3 <- nrow(ivreg_table[test == "Sargan" & prob > 0.05, ]) / nrow(ivreg_table[test == "Sargan", ])
joint_iv_test <- c(iv_test1, iv_test2, iv_test3)
names(joint_iv_test) <- c("Weak", "Wu", "Sarg")
rbind(joint_iv_test, joint_iv_test * 45) %>%
t() %>%
print()
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/FINAL MODELS/total.ARDL.R")
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/FINAL MODELS/total.ARDL.R")
a
rep(a, each= 5, 25)
sapply(arep( each= 5, 25))
sapply(a, rep( each= 5, 25))
sapply(a, rep(., each= 5, 25))
sapply(a, rep(, each= 5, 25))
sapply( rep(a, each= 5, 25))
do.call("rbind",  rep(a, each= 5, 25))
do.call("rbind",  rep(a, each= 5, 25))
rep("a",3)
replicate("a",3)
do.call("rbind",  replicate(a, each= 5, 25))
do.call("rbind",  replicate(a, 27))
do.call("rbind",  replicate(a,5))
a
do.call("rbind",  replicate(a,3))
do.call("rbind",  replicate(a,4))
do.call("rbind",  replicate(a,2))
do.call("rbind",  replicate(a,1))
rep(a$ixprices, length(1992:2019))
bb <- rep(a$ixprices, length(1992:2019))
cbind <- (eu_data, bb)
cbind(eu_data, bb)
105/9
bb
eu_data
tail(eu_data)
eu_data <- eu_data[reporter %in% countries]
eu_data <- eu_data[reporter %in% countries]
############################## NEEDED PACKAGES, DATA AND INITIAL PARAMENTERS ##########################################################
library("magrittr")
library("data.table")
library("systemfit")
library("plm")
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data <- eu_data[reporter %in% countries]
tail(eu_data)
length %>% eu.data
length %>% eu_data
eu_data %>% length
eu_data$reporter %>% length
a <- eu_data[year== 1992, ixprices:= exp(xprices),]
bb <- rep(a$ixprices, length(1992:2019))
cbind(eu_data, bb)
cc <- cbind(eu_data, bb)
View(cc)
bb <- rep(a$ixprices, length(1992:2019))
bbn
bb
a$ixprices
a <- eu_data[year== 1992, ixprices:= exp(xprices),]
a
a$ixprices
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
eu_data[, xprices := exp(xprices)*share_tech_exports, by=.(reporter,year)]
a <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(a$ixprices, length(1992:2019))
bb
cc <- cbind(eu_data, bb)
cc
c <- cbind(eu_data, bb)
cc
c
cc[, bb = exp(xprices)/ bb]
cc[, cc := exp(xprices)/ bb]
cc
View(cc)
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
aa <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(a$ixprices, length(1992:2019))
############################## NEEDED PACKAGES, DATA AND INITIAL PARAMENTERS ##########################################################
library("magrittr")
library("data.table")
library("systemfit")
library("plm")
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
aa <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(aa$ixprices, length(1992:2019))
cc <- cbind(eu_data, bb)
dd <- cc[, cc := exp(xprices)/ bb]
View(dd)
max(dd$cc)
min(dd$cc)
aa
dd$xprices
dd$[reprter=="France",xprices]
dd[reporter=="France",xprices]
dd[reporter=="France",exp(xprices)]
dd[reporter=="France",round(exp(xprices))]
gg <-  dd[reporter=="France",round(exp(xprices))]
gg
gg[1:5]
rep(gg[1:5],length(1992:2019))
gg1 <- rep(gg[1:5],length(1992:2019))
gg/gg1
max(gg/gg1)
max(gg1/gg)
gg1/gg
rep(1992:2019, each=5)
cbind(rep(1992:2019, each=5),gg,gg1)
cbind(rep(1992:2019, each=5),gg,gg1, gg/gg1)
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
View(eu_data)
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/GENERATORS/merge_sectorial_x_m.R")
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/GENERATORS/generate_eu_data_final.R")
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
eu_data[, xprices := exp(xprices)*share_tech_exports, by=.(reporter,year)]
aa <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(a$ixprices, length(1992:2019))
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
eu_data[, xprices := exp(xprices)*share_tech_exports, by=.(reporter,year)]
aa <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(aa$ixprices, length(1992:2019))
cc <- cbind(eu_data, bb)
dd <- cc[, cc := exp(xprices)/ bb]
max(dd$$ccc)
max(dd$$cc)
max(dd$cc)
dd$cc
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
ect_tot <- fread("Data/CSV/COMTRADE/eudata_final_ect_tot.csv")
eu_data <- eu_data[reporter %in% countries]
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
aa <- eu_data[year== 1992, ixprices:= exp(xprices),][year %in% 1992]
bb <- rep(aa$ixprices, length(1992:2019))
cc <- cbind(eu_data, bb)
dd <- cc[, cc := exp(xprices)/ bb]
max(dd$cc)
View(dd)
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/TESTFILES/test_final_TL.R")
eu_growth
eu_growth2
eu_growth[,forecasts2:= eu_growth2$forecasts]
fwrrite("eugrowth.csv")
fwrite(eu_growth,"eugrowth.csv")
fwrite(eu_growth2,"eugrowth2.csv")
############################## NEEDED PACKAGES, DATA AND INITIAL PARAMENTERS ##########################################################
source("src/TESTFILES/tests_TL.total.R")
source("src/TESTFILES/tests_TL.total.AMECO.R")
library("magrittr")
library("data.table")
library("ggplot2")
library("ggpmisc")
library("gridExtra")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
total_F <- fread("Output/CSV/TL.csv")
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
countries_ng <- c("Austria", "Finland", "France", "Germany", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
eu_data <- eu_data[reporter %in% countries]
############# GET DATA TO CALCULATE MEAN GROWTH RATES ##############################################
eu_one <- eu_data[tech == "HIGH"]
eu_growth <- eu_one[, .(year, growth = c(NA, diff(income)), fgrowth = c(NA, diff(fincome))), by = reporter][year != 1992]
tl_coef <- total_F[, .(reporter, tlr = exports_c / imports_c)]
eu_growth <- merge(eu_growth, tl_coef, index = reporter)
eu_growth[, forecasts := fgrowth * tlr]
eu_growth <- eu_growth[, .(reporter, year, growth, forecasts, dif = (growth - forecasts), dif_abs = abs(growth - forecasts))]
############ TESTS ON FINAL MODEL BASED ON MCGREGOR AND SWALES (1985)
model <- plm::plm(growth ~ forecasts, data = eu_growth, model = "pooling")
residuals <- model$residuals
eu_growth <- cbind(eu_growth, residuals) ## table already contains panel of forecasts and actual annaul growth rates
data_scatter <- eu_growth[, .(growth, forecasts)] %>% as.data.frame()
############# REMOVE GREECE FOR COMPARISONS
eu_growth2 <- eu_growth[reporter != "Greece"]
model2 <- lm(growth ~ forecasts, data = eu_growth2)
residuals2 <- model2$residuals
eu_growth2 <- cbind(eu_growth2, residuals2)
data_scatter2 <- eu_growth2[, .(growth, forecasts)] %>% as.data.frame()
#############
par(mfrow = c(2, 2))
plot1 <- ggplot(data_scatter, aes(x = forecasts, y = growth)) +
geom_point() +
stat_poly_line(method = lm, se = FALSE) +
# stat_poly_eq() +
geom_abline(intercept = 0, slope = 1) +
ggtitle("Δy = -0.002 + 1.093MSTL       R^2: 0.532")
plot2 <-
ggplot(data_scatter2, aes(x = forecasts, y = growth)) +
geom_point() +
stat_poly_line(method = lm, se = FALSE) +
# stat_poly_eq() +
geom_abline(intercept = 0, slope = 1) +
ggtitle("Δy = -0.001 + 1.051MSTL(-Gr)       R^2: 0.682")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
par(mfrow = c(1, 1))
plot(c(1:216), data_scatter2$growth, type = "l", col = "blue", ylab = "", xlab = "", axes = F)
par(new = T)
plot(c(1:216), data_scatter2$forecasts, type = "l", col = "red", ylab = "", xlab = "Actual vs Forecasted growth rates")
legend(
x = "bottomright",
legend = c("Y", "Y forec."),
fill = c("blue", "red"),
box.lty = 0,
text.font = 1,
bg = "transparent"
)
model <- plm::plm(growth ~ forecasts, data = eu_growth, model = "pooling")
residuals <- model$residuals
eu_growth <- cbind(eu_growth, residuals) ## table already contains panel of forecasts and actual annaul growth rates
summary(model) %>% print() ## summary coefficients, t tests, RMSE, R^2 and joint F-test
plm::cipstest(residuals ~ 1, data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
############################## NEEDED PACKAGES, DATA AND INITIAL PARAMENTERS ##########################################################
source("src/TESTFILES/tests_TL.total.R")
source("src/TESTFILES/tests_TL.total.AMECO.R")
library("magrittr")
library("data.table")
library("ggplot2")
library("ggpmisc")
library("gridExtra")
eu_data <- fread("Data/CSV/COMTRADE/eudata_final_nom.csv")
total_F <- fread("Output/CSV/TL.csv")
countries <- c("Austria", "Finland", "France", "Germany", "Greece", "Italy", "Netherlands", "Portugal", "Spain")
countries_ng <- c("Austria", "Finland", "France", "Germany", "Italy", "Netherlands", "Portugal", "Spain")
tech <- c("PRIM", "RES", "LOW", "MED", "HIGH")
eu_data[, tech_imports := log(msum) - mprices / 100 - log(xrate)]
eu_data[, tech_exports := log(xsum) - xprices / 100 - log(xrate)]
eu_data <- eu_data[reporter %in% countries]
############# GET DATA TO CALCULATE MEAN GROWTH RATES ##############################################
eu_one <- eu_data[tech == "HIGH"]
eu_growth <- eu_one[, .(year, growth = c(NA, diff(income)), fgrowth = c(NA, diff(fincome))), by = reporter][year != 1992]
tl_coef <- total_F[, .(reporter, tlr = exports_c / imports_c)]
eu_growth <- merge(eu_growth, tl_coef, index = reporter)
eu_growth[, forecasts := fgrowth * tlr]
eu_growth <- eu_growth[, .(reporter, year, growth, forecasts, dif = (growth - forecasts), dif_abs = abs(growth - forecasts))]
############ TESTS ON FINAL MODEL BASED ON MCGREGOR AND SWALES (1985)
model <- plm::plm(growth ~ forecasts, data = eu_growth, model = "pooling")
residuals <- model$residuals
eu_growth <- cbind(eu_growth, residuals) ## table already contains panel of forecasts and actual annaul growth rates
data_scatter <- eu_growth[, .(growth, forecasts)] %>% as.data.frame()
############# REMOVE GREECE FOR COMPARISONS
eu_growth2 <- eu_growth[reporter != "Greece"]
model2 <- lm(growth ~ forecasts, data = eu_growth2)
residuals2 <- model2$residuals
eu_growth2 <- cbind(eu_growth2, residuals2)
data_scatter2 <- eu_growth2[, .(growth, forecasts)] %>% as.data.frame()
#############
par(mfrow = c(2, 2))
plot1 <- ggplot(data_scatter, aes(x = forecasts, y = growth)) +
geom_point() +
stat_poly_line(method = lm, se = FALSE) +
# stat_poly_eq() +
geom_abline(intercept = 0, slope = 1) +
ggtitle("Δy = -0.002 + 1.093MSTL       R^2: 0.532")
plot2 <-
ggplot(data_scatter2, aes(x = forecasts, y = growth)) +
geom_point() +
stat_poly_line(method = lm, se = FALSE) +
# stat_poly_eq() +
geom_abline(intercept = 0, slope = 1) +
ggtitle("Δy = -0.001 + 1.051MSTL(-Gr)       R^2: 0.682")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
par(mfrow = c(1, 1))
plot(c(1:216), data_scatter2$growth, type = "l", col = "blue", ylab = "", xlab = "", axes = F)
par(new = T)
plot(c(1:216), data_scatter2$forecasts, type = "l", col = "red", ylab = "", xlab = "Actual vs Forecasted growth rates")
legend(
x = "bottomright",
legend = c("Y", "Y forec."),
fill = c("blue", "red"),
box.lty = 0,
text.font = 1,
bg = "transparent"
)
model <- plm::plm(growth ~ forecasts, data = eu_growth, model = "pooling")
residuals <- model$residuals
eu_growth <- cbind(eu_growth, residuals) ## table already contains panel of forecasts and actual annaul growth rates
summary(model) %>% print() ## summary coefficients, t tests, RMSE, R^2 and joint F-test
plm::cipstest(residuals ~ 1, data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(model ~ 1, data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(model , data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstes , data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
residuals
residuals/9
length(residuals)/9
rep(countries, each=23)
rep(countries, each=27)
cbind(rep(countries, each=27),residuals)
cbind(rep(c(1993:2919),9),rep(countries, each=27),residuals))
cbind(rep(c(1993:2019),9),rep(countries, each=27),residuals))
cbind(rep(c(1993:2019),9),rep(countries, each=27),residuals)
cips <- cbind(rep(c(1993:2019),9),rep(countries, each=27),residuals)
plm::pdata.frame(cips)
plm::pdata.frame(cips)
colnames(cips)
plm::cipstest(residuals , data = eu_growth, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(residuals , data = cips, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
colnames(cips)
plm::cipstest(cips$residuals, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(cips["residuals"], index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(cips[,"residuals"], index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
plm::cipstest(cips["residuals",], index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
cips
cipsr <- cips$residuals
cips
cips <- plm::pdata.frame(cips)
cipsr <- cips$residuals
plm::cipstest(cipsr, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
cips$residuals
cips$residuals
plm::cipstest(cips$residuals, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
cips <-plm::pdata.frame(cbind(rep(c(1993:2019),9),rep(countries, each=27),as.numeric(residuals))
cips <-plm::pdata.frame(cbind(rep(c(1993:2019),9),rep(countries, each=27),as.numeric(residuals))
cips <-plm::pdata.frame(cbind(rep(c(1993:2019),9),rep(countries, each=27),as.numeric(residuals))
cips
cips <-plm::pdata.frame(cbind(rep(c(1993:2019),9),rep(countries, each=27),as.numeric(residuals)))
plm::cipstest(cips$residuals, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
cips
cips$residuals
colnames(cips)
plm::cipstest(cips$X3, index = c("reporter", "year")) %>% print() ## panel stationarity 2 generation
cips <-plm::pdata.frame(cbind(rep(c(1993:2019),9),rep(countries, each=27),as.numeric(residuals)),  index = c("reporter", "year"))
cips <-plm::pdata.frame(year=cbind(rep(c(1993:2019),9),reporter=rep(countries, each=27),residuals=as.numeric(residuals)),  index = c("reporter", "year"))
cips <-plm::pdata.frame(year=cbind(rep(c(1993:2019),9),reporter=rep(countries, each=27),residuals=as.numeric(residuals)),  index = c("reporter", "year"))
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=as.numeric(residuals)),  index = c("reporter", "year"))
plm::cipstest(cips$X3) %>% print() ## panel stationarity 2 generation
plm::cipstest(cips$residuals) %>% print() ## panel stationarity 2 generation
cips$residuals
cips$residuals
plm::cipstest(as.numeric(cips$residuals) %>% print() ## panel stationarity 2 generation
plm::cipstest(as.numeric(cips$residuals)) %>% print() ## panel stationarity 2 generation
plm::cipstest(as.numeric(cips$residuals))
plm::cipstest(cipsas.numeric(cips$residuals))
cips
cips["residuals"]
plm::cipstest(cips["residuals"])
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=as.numeric(residuals)),  index = c("reporter", "year"))
cips
aa <- cips["residuals"]
aa
View(aa)
View(aa)
aa <- cips["residuals"]
plm::cipstest(aa)
aa
pseries(aa)
library(plm)
pseries(aa)
aa <- cips["residuals"]
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=as.numeric(residuals)),  index = c("reporter", "year"))
cips
aa <- cips["residuals"]
plm::cipstest(aa)
class(cips)
eu_growth
eu_growth$forecasts
cipstest(eu_growth$forecasts)
cipstest(eu_growth$forecasts)
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=as.numeric(residuals)),  index = c("reporter", "year"))
aa <- cips$residuals
clas(aa)
class(aa)
aa
cipstest(aa)
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals,  index = c("reporter", "year"))
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals,  index = c("reporter", "year"))
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals),  index = c("reporter", "year"))
cips <-plm::pdata.frame(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals),  index = c("reporter", "year"))
cips
aa <- cips$residuals
aa
aa <- cips["residuals"]
aa
class(aa)
colnames(aa)
aa$residuals
cipstest(cips)
cipstest(cips$residuals)
ar <- data("Produc", package="plm")
ar
data("Produc", package = "plm")
Produc <- pdata.frame(Produc, index=c("state", "year"))
## check whether the gross state product (gsp) is trend-stationary
cipstest(Produc$gsp, type = "trend")
Produc
Produc$gsp
cips <-data.table(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals),  index = c("reporter", "year"))
cips
cips <-data.table(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals))
cips
cips$residuals
class(cips$residuals
class(cips$residuals
class(cips$residuals)
Produc$gsp
cips <-data.table(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals))
cips <-data.table(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals))[,residuals:= as.numeric(residuals)]
cips
cips
class(cips$residuals)
cipstest(cips$residuals)
cips <-data.table(cbind("year"=rep(c(1993:2019),9),"reporter"=rep(countries, each=27),"residuals"=residuals))[,residuals:= as.numeric(residuals)]
cips <-pdata.frame(cips,  index = c("reporter", "year"))
cips
class(cips$residuals)
cipstest(cips$residuals)
cips$residuals
ar <- cips$residuals
cipstest(cips$residuals)
cipstest(cips$residuals, model="mg")
cipstest(cips$residuals, model="pmg")
cipstest(cips$residuals, model="cmg")
cipstest(cips$residuals, model="dmg")
cipstest(cips$residuals, truncated=T)
source("C:/Users/iliciuv/Dropbox/RESEARCH/R PROJECTS/THIRLWALL2023/src/TESTFILES/test_final_TL.R")
bb <- plm::purtest(residuals ~ 1, data = eu_growth, index = c("reporter", "year"))
summary(Bb)
summary(bb)
bb <- plm::purtest(residuals ~ 1, data = eu_growth, index = c("reporter", "year"), test="ips")
bb
summary(Bb)
summary(bb)
